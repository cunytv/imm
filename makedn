#!/bin/bash

SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

DN_DATE=$(date +%Y-%m%d)

PROCESS_DIR="$(mktemp -d)"
mkdir -p "$PROCESS_DIR"

_validate_url(){
    if [[ `wget -S --spider $1  2>&1 | grep 'HTTP/1.1 200 OK'` ]] ; then
        echo "true"
    else
        echo "false"
    fi
}

_validate_scc(){
    SCC="${1}"
    if [[ "$(head -c 9 "${SCC}")" == "Scenarist" ]] ; then
        echo "true"
    else
        echo "false"
    fi
}

_usage(){
        echo
        echo "makedn"
        echo "This application will download, transcode and deliver video and scc files from democracynow.org/static."
        echo "Usage: $(basename "${0}") [ YYYY-MMDD ]"
        echo "  -h  show this help"
        echo
        echo "Running:"
        echo "    makedn"
        echo "will process the current day's file"
        echo
        echo "running"
        echo "    makedn 2018-0704"
        echo "will process the file for July 4th, 2018. Be sure to provide the date in YYYY-MMDD format."
        echo
        exit
}

OPTIND=1
while getopts ":h" OPT ; do
    case "${OPT}" in
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makedn" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

if [[ -n "${1}" ]] ; then
    USER_DATE="${1}"
    if [[ -n "$(echo "$USER_DATE" | grep "[2][0][0-9][0-9]-[0-1][0-9][0-3][0-9]")" ]] ; then
        DN_DATE="${USER_DATE}"
        _report -dt "Will use $USER_DATE instead of ${DN_DATE}"
    else
        _report -wt "${USER_DATE} is not properly formated. Used YYYY-MMDD format."
        exit
    fi
fi

DN_WEEKDAY=$(date -j -f '%Y-%m%d' "${DN_DATE}" +%u)
MEDIA_ID="DEMNOW0${DN_WEEKDAY}"

MP4_FILE="http://mpeg.democracynow.org/dn${DN_DATE}-hd.mp4"
SCC_FILE="https://www.democracynow.org/scc/dn${DN_DATE}.scc"

MP4_ONLINE=$(_validate_url "${MP4_FILE}")
SCC_ONLINE=$(_validate_url "${SCC_FILE}")

### loop until both mp4 and scc are processed, else check scc first then mp4

if [[ "${MP4_ONLINE}" == "true" && "${SCC_ONLINE}" == "true" ]] ; then
    #download
    _report -dt "DN files for ${DN_DATE} are online. Processing files in ${PROCESS_DIR}."
    _report -dt "Downloading Democracy Now SCC"
    wget "${SCC_FILE}" -O "${PROCESS_DIR}/${MEDIA_ID}.scc"
    if [[ "$(_validate_scc "${PROCESS_DIR}/${MEDIA_ID}.scc")" != "true" ]] ; then
        _report -wt "The SCC file for ${DN_DATE} is not VALID yet. See ${SCC_FILE}."
        exit
    fi
    _report -dt "Downloading Democracy Now MP4"
    wget "${MP4_FILE}" -O "${PROCESS_DIR}/${MEDIA_ID}.mp4"
    _report -dt "Running makebroadcast on ${MEDIA_ID}.mp4"

    ### log downloads with times

    #transcode
    makebroadcast "${PROCESS_DIR}/${MEDIA_ID}.mp4"

    #deliver
    _report -dt "Delivering mov to Omneon"
    uploadomneon "${PROCESS_DIR}/service/${MEDIA_ID}.mov"
    _report -dt "Delivering scc to Omneon"
    uploadomneon "${PROCESS_DIR}/${MEDIA_ID}.scc"

    ### double check that file is on omneon before deleting
    ### log deliveries with times

    # cleanup
    _report -dt "Cleaning up temporary files."
    rm -v "${PROCESS_DIR}/service/${MEDIA_ID}.mov"
    rm -v "${PROCESS_DIR}/${MEDIA_ID}.scc"
    rm -v "${PROCESS_DIR}/${MEDIA_ID}.mp4"

    # announce
    _email_delivery "oksana.israilova@tv.cuny.edu"
else
    if [[ "${MP4_ONLINE}" != "true" ]] ; then
        _report -wt "The MP4 file for ${DN_DATE} is not online at https://www.democracynow.org/static yet."
    fi
    if [[ "${SCC_ONLINE}" != "true" ]] ; then
        _report -wt "The SCC file for ${DN_DATE} is not online at https://www.democracynow.org/static yet. See ${SCC_FILE}."
    fi
fi

### before final exit, doubel check that the scc online is the same as the one gathered (as is perhaps the scc updated since processing the mp4)
