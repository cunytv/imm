#!/bin/bash
VERSION="1.0"
SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

DELIVERY_DIRECTORY="/Volumes/XsanFileserver2/CUNY TV files/To web and social media"
SCC_DIRECTORY="/Volumes/fs0/cunytv.dir/subtitle.dir"

_checkdir "${DELIVERY_DIRECTORY}"
_checkdir "${SCC_DIRECTORY}"

find "${DELIVERY_DIRECTORY}" -name "*.mp4" ! -name "*__opensub.mp4" ! -name "*_subtitled.mp4" -maxdepth 1 | sort | while read file ; do
    unset MIDDLE_OPTIONS
    DELIVERY_DIRECTORY="/Volumes/XsanFileserver2/CUNY TV files/To web and social media/test4"
    if [[ ! -d "${DELIVERY_DIRECTORY}" ]] ; then
        mkdir "${DELIVERY_DIRECTORY}"
    fi
    BASENAME="$(basename "${file}")"

    # copy scc
    HOPEFUL_SCC="${SCC_DIRECTORY}/${MEDIAID}.scc"

    # deliver scc
    COPY_SCC="${DELIVERY_DIRECTORY}/${BASENAME%.*}.scc"
    if [[ -f "${HOPEFUL_SCC}" ]] && [[ ! -f "${COPY_SCC}" ]] ; then
    COMMENT="$(ffprobe -v 0 -i "${file}" -show_entries format_tags=comment -of default=nw=1:nk=1)"
    FILESECONDS="$(ffprobe -v 0 -i "${file}" -show_entries format=duration -of default=nw=1:nk=1)"
    if [[ -n "${COMMENT}" ]] ; then
        EMBEDDED_MEDIAID="$(echo "${COMMENT}" | grep -o "mediaid=[0-9.]*" | cut -d= -f2)"
        if [[ -n "${EMBEDDED_MEDIAID}" ]] ; then
            _report -d "Using an embedded mediaid: ${EMBEDDED_MEDIAID}"
            MEDIAID="${EMBEDDED_MEDIAID}"
        fi
        INTIME="$(echo "${COMMENT}" | grep -o "in=[0-9:.]*" | cut -d= -f2)"
        OUTTIME="$(echo "${COMMENT}" | grep -o "out=[0-9:.]*" | cut -d= -f2)"
        _report -d "${BASENAME} is a chapter file with this timing ($INTIME - $OUTTIME) of ${MEDIAID}"
        if [[ -n "${INTIME}" ]]; then
            MIDDLE_OPTIONS+=(-ss "${INTIME}")
        fi
        if [[ -n "${OUTTIME}" ]] ; then
            MIDDLE_OPTIONS+=(-to "$OUTTIME")
        fi
    else
        MEDIAID="$(echo ${BASENAME%.*} | sed 's|_SEG[0-9]{2}.*||g')"
    fi
    _report -q -n "Found ${BASENAME} (${MEDIAID})"
        _report -d "Making an scc from ${HOPEFUL_SCC} (${INTIME}-${OUTTIME})"
        ffmpeg -nostdin -i "${HOPEFUL_SCC}" "${MIDDLE_OPTIONS[@]}" -map 0 -c copy "${COPY_SCC}"
    fi

    # make srt
    HOPEFUL_SRT="${DELIVERY_DIRECTORY}/${BASENAME%.*}.en_US.srt"
    if [[ -f "${COPY_SCC}" ]] && [[ ! -f "${HOPEFUL_SRT}" ]] ; then
        _report -d "Making an scc from ${COPY_SCC} (${INTIME}-${OUTTIME})"
        ffmpeg -nostdin -i "${COPY_SCC}" -f srt - | sed 's|<font face="Monospace">{\\an7}||g;s|</font>||g;s|\\h||g' > "${HOPEFUL_SRT}"
    fi

    # make embedded srt
    HOPEFUL_MP4EMBED="${DELIVERY_DIRECTORY}/${BASENAME%.*}_subtitled.mp4"
    if [[ -f "${HOPEFUL_SRT}" ]] && [[ ! -f "${HOPEFUL_MP4EMBED}" ]] ; then
        ffmpeg -nostdin -i "${file}" -i "${HOPEFUL_SRT}" -map_chapters -1 -map 0:v -map 0:a -map 1:s -c:v copy -c:a copy -c:s mov_text "${HOPEFUL_MP4EMBED}"
    fi

    # make open subs
    echo "sec $FILESECONDS"
    HOPEFUL_OPENSUB="${DELIVERY_DIRECTORY}/${BASENAME%.*}_opensub.mp4"
    if [[ -f "${HOPEFUL_SRT}" ]] && [[ ! -f "${HOPEFUL_OPENSUB}" ]] &&  (( $(echo "${FILESECONDS} < 122" | bc -l) )) ; then
        ffmpeg -nostdin -i "${file}" -vf "subtitles=${COPY_SCC}" -map_chapters -1 -c:v libx264 -crf 18 -c:a copy "${HOPEFUL_OPENSUB}"
    fi

done

# now make podcast outputs
find "${DELIVERY_DIRECTORY}" -name "*_podcast.mov" -maxdepth 1 | sort | while read file ; do
    DELIVERY_DIRECTORY="/Volumes/XsanFileserver2/CUNY TV files/To web and social media/test4"
    
    BASENAME="$(basename "${file}")"
    HOPEFUL_SRT="${DELIVERY_DIRECTORY}/${BASENAME%_podcast.mov}.en_US.srt"
    if [[ ! -d "${DELIVERY_DIRECTORY}" ]] ; then
        mkdir "${DELIVERY_DIRECTORY}"
    fi

    HOPEFUL_PODCAST_SUBTITLED="${DELIVERY_DIRECTORY}/${BASENAME%.*}_subtitled.mp4"
    if [[ -f "${HOPEFUL_SRT}" ]] && [[ ! -f "${HOPEFUL_PODCAST_SUBTITLED}" ]] ; then
         _report -d "Making an subtitled_podcast from ${file}"
        ffmpeg -nostdin -i "${file}" -i "${HOPEFUL_SRT}" -map_chapters -1 -map 0:v -map 0:a -map 1:s -c:v copy -c:a copy -c:s mov_text "${HOPEFUL_PODCAST_SUBTITLED}"
    fi
done
