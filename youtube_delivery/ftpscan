#!/usr/bin/perl

#----------------------------------------------------------------------------
#
# ftpscan
# 2015-04-23
#
# This script is intended to scan a folder for newly uploaded files and then 
# upload those files to youtube automatically.
#
# Optional arguements:
# ftpscan hash         - print the hash table
# ftpscan hash <FILE>  - print the details for the file, if it's been 
#                        processed previously
# ftpscan reset <FILE> - Remove the hash table entry for the specified file
# ftpscan help         - Print this help document
#
# Stored Hash details:
# The script saves a hash file in ~cunytvadmin/ftpscan.hash which contains
# saved state information regarding files uploaded to youtube
# 
# Index	Description
# -----	----------------------------
#	 0		Upload start datestamp
#  1		Notes string
#  2		Upload finished datestamp
#  3		Upload results
#	 4		Number of upload atempts
#
# 2015-05-05
# Updated to ignore shows that have copyrighted material
# ^AALE|^AALF|^AITC|^BLAM|^BLTV|^BUNY|^CANA|^CFOR|^CITA|^CIWI|^DANI|^DIGA|^EDCA|
# ^ELCO|^INSO|^IRWR|^ITAL|^NUEV|^OPED|^OTOO|^SCIU|^SPEC|^STRP|^SWTB|^THTK|
# ^TKHL
# ^(AALE|AALF|AITC|BLAM|BLTV|BUNY|CANA|CFOR|CITA|CIWI|DANI|DIGA|EDCA|ELCO|INSO|
# IRWR|ITAL|NUEV|OPED|OTOO|SCIU|SPEC|STRP|SWTB|THTK|TKHL)
#
# 2015-10-07 - Adding three new shows to the allowed list: TNGD, PTSBL & OPEN
#
# 2015-10-22 - Updated the formatting for printing out the hash table and
#              added an option to show the information for a single file
#
# 2016-03-03 - Adding new show to the allowed: BLAM
#
# 2016-04-08 - No longer upload: EDCA
#
# 2016-04-08 - Adding new show to the allowed: SDSW
#
# 2017-07-05 - Adding ISLG, SMRB
#
# 2018-03-13 - Adding CNJZ
#----------------------------------------------------------------------------

use strict;
use warnings;
use experimental 'smartmatch';

use File::Type;
use Storable;
use JSON::XS qw(encode_json decode_json);
use File::Slurp qw(read_file write_file);
use Time::Local;

my $debug = 1;
my $dir = "/FTPRoot";
my $donedir = $dir . "/Uploaded";
my $dupdir = $dir . "/Duplicates";
my $errordir = $dir . "/Errors";
my @exts = qw(MP4);
# Maximum number of youtube-upload commands running at a time
my $maxups = 1;
# Maximum number of times to retry uploading a file that received an error
my $maxretries = 4;
my @filesFound = "";
my %fileList = ();
my $logDir = "/var/log/";
my $saveFile = "/Users/cunytvadmin/ftpscan.hash";
my $ytOut = "/tmp/youtube-upload.stdout";
my $ytErr = "/tmp/youtube-upload.stderr";
my @noGoList = (
"AAL",
"AALF",
"AITC",
"BLAM",
"BLTV",
"BUNY",
"CANA",
"CFOR",
"CITA",
"CIWI",
"CNJZ",
"DANI",
"DIGA",
"ELCO",
"INSO",
"IRWR",
"ISLG",
"ITAL",
"NUEV",
"OPED",
"OPEN",
"OTOO",
"PTSBL",
"SCIU",
"SDSW",
"SMRB",
"SPEC",
"SPLT"
"STRP",
"SWTB",
"THTK",
"TKHL",
"TNGD",
"TEST",
"WW"
);

sub logit
{
	my $s = shift;
	my ($logsec,$logmin,$loghour,$logmday,$logmon,$logyear,$logwday,$logyday,$logisdst)=localtime(time);
	my $logtimestamp = sprintf("%4d-%02d-%02d %02d:%02d:%02d",$logyear+1900,$logmon+1,$logmday,$loghour,$logmin,$logsec);
	$logmon++;
	# I originally added the date to the log file name. This is unnecessary, and makes it harder for log rotation
	# my $logFile=$logDir . "ftpscan_$logmon-$logmday-logfile.log";
	my $logFile=$logDir . "ftpscan.log";
	my $fh;
	open($fh, '>>', "$logFile") or die "$logFile: $!";
	print $fh "$logtimestamp: $s\n";
	close($fh);
}

sub saveHash
{
	my $tmp = encode_json \%fileList;
	write_file($saveFile, { binmode => ':raw' }, $tmp);
}

sub loadHash
{
	# Load hash file if it exists
	if ( -f $saveFile )
	{
		my $tmp = read_file($saveFile, { binmode => ':raw' });
		%fileList = %{ decode_json $tmp };
	}
	else
	{
		dbug("No saved hash file found, a new one will be created.\n");
	}
}

sub dbug
{
	if ($debug) { print $_[0]; }
}

sub getDatecode
{
	my $dateStamp = shift;

	dbug("Seconds\t:" . substr($dateStamp, 15) .
"\nMinutes\t:" . substr($dateStamp, 13, 2) . 
"\nHours\t\t:" . substr($dateStamp, 11, 2) .
"\nDay\t\t:" . substr($dateStamp, 8, 2) .
"\nMonth\t\t:" . substr($dateStamp, 5, 2) .
"\nYear\t\t:" . substr($dateStamp, 0, 4) . "\n");

	return timelocal(
substr($dateStamp, 15),
substr($dateStamp, 13, 2),
substr($dateStamp, 11, 2),
substr($dateStamp, 8, 2),
substr($dateStamp, 5, 2)-1,
substr($dateStamp, 0, 4) );
}

sub checkCr
{
	my $filename = shift;

	my $regstr = join('|', @noGoList);
	dbug("Regex string:\n$regstr\n");

	if($filename =~ m/^($regstr)/) 
	{
		dbug("Copyright: Not copyrighted, good to go!\n"); 
		return 1;
	}
	else 
	{
		dbug("Copyright: Copyright restricted, DENIED!\n"); 
		return 0;
	}
}

sub printHelp
{
	my $helpdoc = <<'EOT';

=----------------------------------------------------------------------------
= This script scans the /FTPRoot directory for newly uploaded files and then
= uploads those files, if any, to youtube automatically.
=
= Optional arguements:
=----------------------------------------------------------------------------
=  ftpscan hash         - print the saved hash table of file details
=  ftpscan hash <FILE>  - print the details for the file, if it's been 
=                         processed previously
=  ftpscan reset <FILE> - Remove the hash table entry for the specified file
=  ftpscan help         - Print this help document
=----------------------------------------------------------------------------

EOT
	print("$helpdoc");
}

#######################
### MAIN CODE BLOCK ###
#######################

# Check for arguments
if (@ARGV == 0)
{
	scanftp()
}
elsif (@ARGV == 1)
{
	if ($ARGV[0] eq "hash")
	{
		loadHash();
		foreach my $key (sort { $fileList{$b}[0] cmp $fileList{$a}[0] } keys %fileList)
		{
			my $tmpVal;
			my @tmpArr;
			print("[$key]\n");
			for my $i (0..4)
			{
				$tmpVal = "";
				# $tmpVal = "N/A" unless $fileList{$key}[$i];
				$tmpVal = $fileList{$key}[$i] unless ! $fileList{$key}[$i];
        if(!$tmpVal) { $tmpVal = "N/A"; }	
				# print("| $tmpVal ");
				push (@tmpArr, $tmpVal);
			}
			printf("%-20s\t%-16s\t%-20s\t%-16s\t%3s\n",$tmpArr[0],$tmpArr[1],$tmpArr[2],$tmpArr[3],$tmpArr[4]);
		}
	}
	else { printHelp(); }
	exit;
}
elsif (@ARGV == 2)
{
	if ($ARGV[0] eq "reset")
	{
		loadHash();
		if (exists $fileList{$ARGV[1]})
		{
			print("Hash values found for $ARGV[1]:\t$fileList{$ARGV[1]}[0]\n");
			print("Resetting hash entries for $ARGV[1]!\n");
			delete $fileList{$ARGV[1]};
			saveHash();
		}
		else
		{
			print("No hash table entry for $ARGV[1].\n");
		}
	}
	elsif ($ARGV[0] eq "hash")
	{
    loadHash();
		my $arg = $ARGV[1];
    my $tmpVal;
    my @tmpArr;
		if(exists $fileList{$arg})
		{
	    print("[$arg]\n");
	    for my $i (0..4)
	    {
	      $tmpVal = "";
	      # $tmpVal = "N/A" unless $fileList{$arg}[$i];
	      $tmpVal = $fileList{$arg}[$i] unless ! $fileList{$arg}[$i];
	      if(!$tmpVal) { $tmpVal = "N/A"; }
	      # print("| $tmpVal ");
	      push (@tmpArr, $tmpVal);
	    }
	    printf("%-20s\t%-16s\t%-20s\t%-16s\t%3s\n",$tmpArr[0],$tmpArr[1],$tmpArr[2],$tmpArr[3],$tmpArr[4]);
		}	
		else
		{
			print("No database entry found for $ARGV[1]\n");
		}
	}
	else { printHelp(); }
	exit;
}
else { printHelp(); exit; }


#########################
### start scanftp sub ###
#########################

sub scanftp
{
	# Get number of uploads running
	my $runningups = checkUps();
	my $dateStamp = "";
	if ($runningups == 1)
	{
		dbug("Number of uploads currently in progress: $runningups\n");
		
		# Get the current file list from the directory
		opendir DIR, $dir or die "Cannot open directory $dir: $!";
		my @files = grep { $_ ne '.' && $_ ne '..' && $_ ne 'Errors' && $_ ne 'Uploaded' && $_ ne 'Duplicates'} readdir DIR;
		closedir DIR;
		dbug("Number of files in main directory: " . @files . "\n");
	
		# Load the saved hash file if it exists
		loadHash();
		
		# Process the file list and keep valid file types
		foreach my $file (@files) 
		{
			# Check if the file is still in the process of being uploaded to the FTPRoot folder
			if ($file =~ m/uploading/)
			{
				# Ignore file and move on to the next one
				next;
			}
			# Check if the file is copyrighted
			if ( !checkCr($file) )
			{
				$dateStamp = `date +"%Y-%m-%d_%H%M%S"`;
				chomp $dateStamp;
				dbug("Datestamp: $dateStamp\n");
				# Add it to the file list
				$fileList{$file}[0] = $dateStamp;
				dbug("$file: This file is in the copyright restricted list and will be skipped.\n");
				$fileList{$file}[1] = "Upload skipped";
				if ($fileList{$file}[4]) 
				{
					$fileList{$file}[4] = $fileList{$file}[4] + 1;
					if($fileList{$file}[4] > $maxretries)
					{
						logit("Upload retry limit reached for $file [copyrighted]");
					}
				}
				else
				{
					$fileList{$file}[4] = 1;
				}
				logit("Upload skipped: $file is in the copyright restricted list");	
				# Send e-mail with results of successfully uploaded file
				my $mailBody = "Subject: YouTube Upload - File skipped due to copyright restriction: $file.\n";
				$mailBody = "The file [$file] has _NOT_ been uploaded to YouTube because it is not in the list\n";
				$mailBody .= "of allowed programs to be uploaded to YouTube.\n";
				open(MAIL, "|/usr/sbin/sendmail -t");
				print MAIL "To: webteam\@cuny.tv,oksana\@cuny.tv\n";
				print MAIL "cc: josh\@cuny.tv\n";
				print MAIL "From: filemaker12\@cuny.tv\n";
				print MAIL "Subject: YouTube upload - File skipped: $file\n\n";
				print MAIL $mailBody;
				close(MAIL);
				`mv "$dir/$file" "$donedir/$file"`;
				next;
			}
	
			# Get the file extension
			my $ext = substr($file, -3);
			# Convert case so we don't have to match variations (mp4, MP4, Mp4, etc)
			$ext = uc $ext;
			
			if ($ext ~~ @exts)
			{
			# Check if it's been processed
				if (exists $fileList{$file} && $fileList{$file}[1] eq "Upload complete")
				{
					# If the file has been processed previous, log it and move it to the duplicates directory
					dbug("$file: Already processed.\n");
					logit("$file has already been processed previously.  Skipping.");
					`mv "$dir/$file" "$dupdir/$file"`;
				}
				else
				{
					$dateStamp = `date +"%Y-%m-%d_%H%M%S"`;
					chomp $dateStamp;
					dbug("Datestamp: $dateStamp\n");
					# Add it to the file list
					$fileList{$file}[0] = $dateStamp;
					$fileList{$file}[1] = "Upload Started";
					saveHash();
					my $title = $file;
					$title =~ s/\..+$//;
	#				$title =~ s/_S[0-9]$//;
	#				$title =~ s/_V[0-9]$//;
	#				$title =~ s/DV$//;
	#				$title =~ s/HD$//;
	#				$title =~ s/_WEB$//;
					logit("Upload started: $file [$title]");	
					dbug("Title: $title\n");
					dbug("Valid file: $file\n");
					dbug("/usr/local/bin/youtube-upload --client-secrets=\"/Library/Frameworks/Python.framework/Versions/2.7/share/youtube_upload/client_secrets.json\" --credentials-file=\"/Users/cunytvadmin/.youtube-upload-credentials.json\" --title=$title --privacy=private \"$dir/$file\" 1>$ytOut 2>$ytErr");
					system("/usr/local/bin/youtube-upload --client-secrets=\"/Library/Frameworks/Python.framework/Versions/2.7/share/youtube_upload/client_secrets.json\" --credentials-file=\"/Users/cunytvadmin/.youtube-upload-credentials.json\" --title=$title --privacy=private \"$dir/$file\" 1>$ytOut 2>$ytErr");
					# system("youtube-upload --title=$title --privacy=private \"$dir/\" 1>$ytOut 2>$ytErr");
					sleep 1 while not -e $ytOut;
					my $uploadResult = `cat $ytOut`;
					chomp $uploadResult;
					if(length $uploadResult == 11)
					{
						dbug("Upload Results: $uploadResult\n");
						$fileList{$file}[1] = "Upload complete";
						$dateStamp = `date +"%Y-%m-%d_%H%M%S"`;
						chomp $dateStamp;
						$fileList{$file}[2] = $dateStamp;
						$fileList{$file}[3] = $uploadResult;
						if ($fileList{$file}[4]) 
						{
							$fileList{$file}[4] = $fileList{$file}[4] + 1;
						}
						else
						{
							$fileList{$file}[4] = 1;
						}
						$fileList{$file}[5] = sprintf("%dD-%dH-%dM-%dS",
	(gmtime ( getDatecode($fileList{$file}[2]) - getDatecode($fileList{$file}[0]) ) )[7,2,1,0]);
						# Move finished file to uploaded directory
						dbug("mv \"$dir/$file\" \"$donedir/$file\"\n");
						`mv "$dir/$file" "$donedir/$file"`;
						
						# Send e-mail with results of successfully uploaded file
						my $mailBody = "Subject: New file uploaded to YouTube: $title.\n";
						$mailBody = "A file has been successfully uploaded to CUNY TV's YouTube Channel.\n";
						$mailBody .= "File details:\n";
						$mailBody .= "File name: $file\n";
						$mailBody .= "File title: $title\n";
						$mailBody .= "Upload start time: $fileList{$file}[0]\n";
						$mailBody .= "Upload end time: $fileList{$file}[2]\n";
						$mailBody .= "Upload duration: $fileList{$file}[5]\n";
						$mailBody .= "YouTube ID: $uploadResult\n";
						open(MAIL, "|/usr/sbin/sendmail -t");
						print MAIL "To: webteam\@cuny.tv,oksana\@cuny.tv\n";
						print MAIL "cc: josh\@cuny.tv\n";
						print MAIL "From: filemaker12\@cuny.tv\n";
						print MAIL "Subject: New file uploaded to YouTube: $title\n\n";
						print MAIL $mailBody;
						close(MAIL);
						logit("Upload success: $file [$title]");
					}
					else
					{
						dbug("There was an error using the youtube-upload script.  Here are the details:\n");
						my $errInfo = `cat $ytErr`;
						dbug($errInfo . "\n");
						`mv "$dir/$file" "$errordir/$file"`;
	
						$fileList{$file}[1] = "Upload error";
						if ($fileList{$file}[4]) 
						{
							$fileList{$file}[4] = $fileList{$file}[4] + 1;
							if($fileList{$file}[4] > $maxretries)
							{
								logit("Upload retry limit reached for $file [$title]");
							}
						}
						else
						{
							$fileList{$file}[4] = 1;
						}
						# Send e-mail with results of successfully uploaded file
						my $mailBody .= "There was an error when trying to upload $file on $dateStamp.\n";
						$mailBody .= "The youtube-upload STDERR is as follows:\n";
						$mailBody .= `cat $ytErr` . "\n";
						open(MAIL, "|/usr/sbin/sendmail -t");
						print MAIL "To: josh\@cuny.tv\n";
						print MAIL "From: filemaker12\@cuny.tv\n";
						print MAIL "Subject: Error with youtube-upload script: $title\n\n";
						print MAIL $mailBody;
						close(MAIL);
						logit("Upload failure: $file [$title]");
						my $tmpErr = `cat $ytErr`;
						logit($tmpErr);
					}
				}
			}
			else
			{
				dbug("Invalid file: $file\n");
				logit("Invalid file: $file");
			}
		}
		
		# Save hash file
		saveHash();
	
		# Get the current file list from the directory
		opendir DIR, $dir or die "Cannot open directory $dir: $!";
		@files = grep { $_ ne '.' && $_ ne '..' && $_ ne 'Errors' && $_ ne 'Uploaded' && $_ ne 'Duplicates'} readdir DIR;
		closedir DIR;
		dbug("Files found this time: " . @files . "\n");
		# Check if there are any files left to process
		if (! @files) 
		{
			dbug("No files left in the root directory, checking the $errordir for files.\n");
			
			# Get the current file list from the directory
			opendir DIR, $errordir or die "Cannot open directory $errordir: $!";
			@files = grep { $_ ne '.' && $_ ne '..'} readdir DIR;
			closedir DIR;
			dbug("Number of files: " . scalar(@files) . "\n");
			foreach my $file (@files) 
			{
				
				dbug("File: $file\n");
				if(-f "$errordir/$file")
				{
					if($fileList{$file}[4])
					{
						if($fileList{$file}[4] <= $maxretries)
						{
							# Move files from the error dir back to the main dir
							`mv $errordir/$file $dir/$file`;
							dbug("Moving $errordir/$file to $dir/$file...\n");
						}
						else { dbug("Tried to upload too many times.\n"); }
					}
					else
					{
						# Move files from the error dir back to the main dir
						`mv $errordir/$file $dir/$file`;
						dbug("Moving $errordir/$file to $dir/$file...\n");
					}
				}
			}
		}
		
	}
	else
	{
		dbug("The ftpscan is already running.\n");
		logit("The ftpscan program is already running");
	}
}
#######################
### end scanftp sub ###
#######################
	
# Check for the number of youtube-upload commands running
sub checkUps {
	my $ups = `ps aux | grep "\/usr\/local\/bin\/[y]outube-upload" | wc -l | sed -e 's/^[ \t]*//'`;
	$ups += `ps aux | grep "\/usr\/local\/bin\/[f]tpscan" | egrep -v "(vim|tail)" | wc -l | sed -e 's/^[ \t]*//'`;

	return $ups
}

sub printHash {

}
