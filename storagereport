#!/bin/bash

# internal functions
_get_iso8601(){
    date +%FT%T
}
_log(){
    MMLOGNAME="mm.log"
    MMLOGDIR="${CUSTOM_LOG_DIR:-/tmp}"
    MMLOGFILE="${MMLOGDIR}/${MMLOGNAME}"
    if [ ! -d "${MMLOGDIR}" ] ; then
        _mkdir2 "${MMLOGDIR}"
        if [ "${?}" -ne 0 ]; then
            echo "${0}: Can't create log directory at ${MMLOGDIR}, exiting... Use mmconfig to change logging directory."
            exit 1
        fi
    fi
    OPTIND=1
    while getopts ":beac" OPT; do
        case "${OPT}" in
            b) STATUS="start" ;;              # script is beginning
            e) STATUS="end"   ;;              # script is ending
            a) STATUS="abort" ;;              # script is aborted
            c) STATUS="comment" ;;            # comment about what script is doing
            w) STATUS+"warning" ;;            # warning information
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    NOTE="${1}"
    echo $(_get_iso8601)", $(basename "${0}"), ${STATUS}, ${OP}, ${MEDIAID}, ${NOTE}" >> "${MMLOGFILE}"
}
_mkdir2(){
    local DIR2MAKE=""
    while [ "${*}" != "" ] ; do
        DIR2MAKE="${1}"
        if [ ! -d "${DIR2MAKE}" ] ; then
            mkdir -p "${DIR2MAKE}"
            if [ "${?}" -ne 0 ]; then
                _report -wt "${0}: Can't create directory at ${DIR2MAKE}"
                exit 1
            fi
        fi
        shift
    done
}
_report(){
    local RED="$(tput setaf 1)"   # Red      - For Warnings
    local GREEN="$(tput setaf 2)" # Green    - For Declarations
    local BLUE="$(tput setaf 4)"  # Blue     - For Questions
    local NC="$(tput sgr0)"       # No Color
    local COLOR=""
    local STARTMESSAGE=""
    local ENDMESSAGE=""
    local ECHOOPT=""
    local LOG_MESSAGE=""
    OPTIND=1
    while getopts ":qdwstn" OPT; do
        case "${OPT}" in
            q) COLOR="${BLUE}" ;;                         # question mode, use color blue
            d) COLOR="${GREEN}" ;;                        # declaration mode, use color green
            w) COLOR="${RED}" ; LOG_MESSAGE="Y";;                 # warning mode, use color red
            s) STARTMESSAGE+=([$(basename "${0}")] ) ;;     # prepend scriptname to the message
            t) STARTMESSAGE+=($(_get_iso8601) '- ' ) ;;     # prepend timestamp to the message
            n) ECHOOPT="-n" ;;                          # to avoid line breaks after echo
        esac
    done
    shift $(( ${OPTIND} - 1 ))
    MESSAGE="${1}"
    echo "${ECHOOPT}" "${COLOR}${STARTMESSAGE[@]}${MESSAGE}${NC}"
    [ "${LOG_MESSAGE}" = "Y" ] && _log -w "${MESSAGE}"
}
_check4mount(){
    # check to see if a requested volume is mount and warn if not
    local VOLUME=""
    while [ "${*}" != "" ] ; do
        VOLUME="${1}"
        if [ $(mount | grep -c ${VOLUME}) = 0 ] ; then
            echo
            echo
            _report -wt "Please connect to ${VOLUME} on $(uname -n)"
            echo
            echo
        fi
        shift
    done
}

## local variables
# declare an age in days under which files will be excluded from being removal candidates
keepnewforXdays=5

## connect to Autosaved folder if not already
if [ $(mount | grep -c /Volumes/Autosaved) = 0 ] ; then
    if [ ! -d /Volumes/Autosaved ] ; then
        mkdir /Volumes/Autosaved
    fi
    sudo route -nv add 10.25.0.0/16 10.25.104.1
    mount -t smbfs "smb://archivesxsan@10.25.102.55/Autosaved" /Volumes/Autosaved
fi

## connect to nearline volumes
_check4mount /Volumes/CUNYTV_Media /Volumes/NYCM_Media /Volumes/fs0

# shortcuts
AGED_DATE=$(date -v-${keepnewforXdays}d '+%F')
TODAY=$(date '+%F')

##inputs
# protrack csv export from NYCMG
NYCMG_MEDIAID_CSV="$HOME/Desktop/REPORTS/NYCLIFE01011980.csv"
# files to not remove
EVERGREEN_LIST="$HOME/Desktop/REPORTS/EVERGREEN.txt"
# directory where cunytv protrack database reports to
CUNY_PROTRACK_REPORT_DIR="/Volumes/XsanFileserver2/CUNY TV files/From library/schedules/"
# files from the filemaker protracker report database
CUNYTV_TOAIRALL="${CUNY_PROTRACK_REPORT_DIR}/cunytvto_air_all.txt"
CUNYTV_TOAIR="${CUNY_PROTRACK_REPORT_DIR}/cunytvto_air.txt"
CUNY_FILLERS="${CUNY_PROTRACK_REPORT_DIR}/all_ids_filler.txt"
CUNY_PROGRAMS="${CUNY_PROTRACK_REPORT_DIR}/all_ids_program.txt"
CUNY_SEGMENTS="${CUNY_PROTRACK_REPORT_DIR}/all_ids_segments.txt"
# nearline folder of NYCMG files
NYCMG_ROOT="/Volumes/NYCM_Media"
NYCMG_NEARLINE_PATH="${NYCMG_ROOT}/media"
# nearline folder of CUNYTV files
CUNYTV_DIGACQ_PATH="/Volumes/CUNYTV_Media/acquisitions"
# omneon path
OMNEON_PATH="/Volumes/fs0/clip.dir"
# array of about-to-runs
abouttoruns=(/Volumes/Autosaved/02-LIFE.xml /Volumes/Autosaved/03-GOV.xml /Volumes/Autosaved/04-WORLD.xml)

#outputs
REPORTDIR="$HOME/Desktop/REPORTS/$TODAY"
REPORTDIRNYC="${NYCMG_ROOT}/reports"
NYCMG_ABOUT_TO_RUN_DIR="${REPORTDIR}/nycmg-about-to-runs"
IDS_NYCMG="$REPORTDIR/protrack/nycmg_ids_all.txt"
IDS_CUNYTV="$REPORTDIR/protrack/cunytv_ids_all.txt"
IDS_BOTH="$REPORTDIR/protrack/cunytv_and_nycmg_ids_all.txt"
ON_OMNEON_FILES_STAT="$REPORTDIR/omneon/what_is_on_the_omneon_stat.txt"
ON_OMNEON_IDS="$REPORTDIR/omneon/what_is_on_the_omneon_ids_only.txt"
ON_OMNEON_IDS_OLD="$REPORTDIR/omneon/what_is_on_the_omneon_and_old_ids_only.txt"
ON_OMNEON_IDS_NO_EVERGREEN="$REPORTDIR/omneon/what_is_on_the_omneon_and_old_ids_only_no_evergreen.txt"
NYCMG4AIR="$REPORTDIR/pebblebeach/nycmg_ids_in_upcoming_air.txt"
CUNYTV4AIR="$REPORTDIR/cunytv_ids_in_upcoming_air.txt"
NYCMG_FILLER_IDS="$REPORTDIR/protrack/nycmg_ids_of_filler.txt"
CUNYTV_FILLER_IDS="$REPORTDIR/protrack/cunytv_ids_of_filler.txt"
ORPHANS="$REPORTDIR/orphans.txt"
ORPHANPATHS="$REPORTDIR/orphans_fullpath.txt"
ORPHANSDETAIL="$REPORTDIR/orphans_details.csv"
ORPHANSDETAIL_CUNYONLY="$REPORTDIR/orphans_details_cunyonly.csv"
CONFLICTS="$REPORTDIR/conflicts.txt"
NYCMG_ON_OMNEON="$REPORTDIR/omneon/what_is_on_the_omneon_ids_only_nycmg_only.txt"
CUNYTV_ON_OMNEON="$REPORTDIR/omneon/what_is_on_the_omneon_ids_only_cunytv_only.txt"
NYCMG_ON_OMNEON_NOT_FILLER="$REPORTDIR/omneon/what_is_on_the_omneon_ids_only_nycmg_only_not_filler.txt"
CUNYTV_ON_OMNEON_NOT_FILLER="$REPORTDIR/omneon/what_is_on_the_omneon_ids_only_cunytv_only_not_filler.txt"
NYCMG_NEARLINE="$REPORTDIR/nycmg_on_nearline.txt"
NYCMG_NEARLINE_STAT="$REPORTDIR/nycmg_on_nearline_stat.txt"
NYCMG_NEARLINE_BY_SIZE="$REPORTDIR/nycmg_on_nearline_by_filesize.txt"
NYCMG_NEARLINE_BY_SIZE_WITH_INFO="$REPORTDIR/nycmg_on_nearline_by_filesize_with_protrack_info.csv"
NYCMG_REMOVAL_CANDIDATES="$REPORTDIR/nycmg_omneon_removal_candidates.txt"
NYCMG_REMOVAL_CANDIDATES_NEARLINE="$REPORTDIR/nycmg_omneon_removal_candidates_already_on_nearline.txt"
NYCMG_REMOVAL_CANDIDATES_NOT_NEARLINE="$REPORTDIR/nycmg_omneon_removal_candidates_not_on_nearline.txt"
CUNYTV_NEARLINE="$REPORTDIR/cunytv_on_nearline.txt"
CUNYTV_NEARLINE_STAT="$REPORTDIR/cunytv_on_nearline_stat.txt"
CUNYTV_REMOVAL_CANDIDATES="$REPORTDIR/cunytv_omneon_removal_candidates.txt"
CUNYTV_REMOVAL_CANDIDATES_NEARLINE="$REPORTDIR/cunytv_omneon_removal_candidates_already_on_nearline.txt"
CUNYTV_REMOVAL_CANDIDATES_NOT_NEARLINE="$REPORTDIR/cunytv_omneon_removal_candidates_not_on_nearline.txt"
CUNYTV_TO_RESTORE="$REPORTDIR/cunytv_to_recall.txt"
NYCMG_TO_RESTORE="$REPORTDIR/nycmg_to_recall.txt"
CUNYTV_TO_RESTORE_FROM_LTO="$REPORTDIR/cunytv_to_recall_from_lto.txt"
NYCMG_TO_RESTORE_FROM_LTO="$REPORTDIR/nycmg_to_recall_from_lto.txt"
CUNYTV_TO_RESTORE_FROM_LTO_DETAIL="$REPORTDIR/cunytv_to_recall_from_lto_detail.txt"
NYCMG_TO_RESTORE_FROM_LTO_DETAIL="$REPORTDIR/nycmg_to_recall_from_lto_detail.txt"
NYCMG_ON_LTO_SIZE_EXT="/$REPORTDIR/nycmg_lto_with_extension_and_size.txt"
NYCMG_ON_LTO_PATH="/$REPORTDIR/nycmg_lto_with_path.txt"
CUNYTV_ON_LTO_SIZE_EXT="$REPORTDIR/cunytv_lto_with_extension_and_size.txt"
BAD_FILENAMES="$REPORTDIR/bad_filenames.txt"
NYCMG_EXPIRED_IDS="$REPORTDIR/nycmg_expired_all.txt"
NYCMG_EXPIRED_IDS_ONLINE="$REPORTDIR/nycmg_expired_online.csv"
NYCMG_EXPIRED_IDS_ONLINE_WITH_INFO="$REPORTDIR/nycmg_expired_online_with_protrack_info.csv"
NYCMG_STORAGE_SUMMARY="$REPORTDIR/nycmg_storage_summary.txt"

# set up reporting directories
_mkdir2 "$REPORTDIR" "$REPORTDIR/protrack" "$REPORTDIR/pebblebeach" "$REPORTDIR/omneon" "$REPORTDIRNYC" "${NYCMG_ABOUT_TO_RUN_DIR}"

### REPORT ON MEDIAIDS IN UPCOMING AIR
# get CUNYTV mediaids that are needed for air
cat "$CUNYTV_TOAIRALL" "$CUNYTV_TOAIR" | tr "\r" "\n" | grep "^[a-zA-Z0-9]" | awk '{print $1}' | sort -u | grep -v "^$" > "$CUNYTV4AIR"
_report "STORAGE REPORT - $(_get_iso8601)"
echo
_report -d "Omneon status information:"
df -h "${OMNEON_PATH}"
_report -d "The omneon is at $(df -h /Volumes/fs0 | grep /Volumes/fs0 | awk '{print $5}') capacity."
_report -d "The omneon has $(df -h /Volumes/fs0 | grep /Volumes/fs0 | awk '{print $4}') available."
echo
_report -d "Storage reports have been written to: ${REPORTDIR}"
echo
printf "Media ID counts\n"
printf "%-32s %12s %20s \n" "Schedule" "Media Count" "Last Update"
printf "%-32s %12d %20s \n" "CUNYTV (final)" "$(cat "${CUNYTV_TOAIRALL}" | tr "\r" "\n" | grep "^[a-zA-Z0-9]" | awk '{print $1}' | sort -u | wc -l)" "$(stat -F -l -t '%FT%T' "${CUNYTV_TOAIRALL}" | awk '{print $6}')"
printf "%-32s %12d %20s \n" "CUNYTV (future)" "$(cat "${CUNYTV_TOAIR}" | tr "\r" "\n" | grep "^[a-zA-Z0-9]" | awk '{print $1}' | sort -u | wc -l)" "$(stat -F -l -t '%FT%T' "${CUNYTV_TOAIR}" | awk '{print $6}')"
printf "%-32s %12d %20s \n" "CUNYTV (all)" "$(cat "${CUNYTV4AIR}" | wc -l)" "$(stat -F -l -t '%FT%T' "${CUNYTV4AIR}" | awk '{print $6}')"
# get NYCMG mediaids that are needed for air
for abouttorun in "${abouttoruns[@]}" ; do
    if [[ -f "${abouttorun}" ]] ; then
        cp "${abouttorun}" "${NYCMG_ABOUT_TO_RUN_DIR}/"
        printf "%-32s %12d %20s \n" "$(basename "${abouttorun}")" "$(xml sel -t -v //mediaid "${abouttorun}" | grep -v "^$" | sort -u | wc -l)" "$(xml sel -t -v /playlist/history/modified/@datetime "${abouttorun}")"
    else
        _report -w "WARNING ${abouttorun} is expected but is not found."
    fi
done
xml sel -t -v //mediaid "${abouttoruns[@]}" | grep -v "^$" | sort -u > "${NYCMG4AIR}"
printf "%-32s %12d %20s \n" "NYCMG (all)" "$(cat "${NYCMG4AIR}" | wc -l )" ""

### REPORT ON PROTRACK REGISTERED MEDIAIDS
# list all NYCMG ProTrack IDs (Programs and Filler)
# 'T-' and '/1' are temporary prefixes and suffixes of NYCMG mediaids and are removed when filematching
echo
_report -d "Total Known IDs"
cat "$NYCMG_MEDIAID_CSV" | tr "\r" "\n" | cut -d, -f1 | sed 's/T-//' | sed 's|/1||' | grep -v "^$" | sort -u > "$IDS_NYCMG"
printf "%-32s %12d %20s \n"  "NYCMG" "$(cat "$IDS_NYCMG" | wc -l)" "$(stat -F -l -t '%FT%T' "$NYCMG_MEDIAID_CSV" | awk '{print $6}')"
cat "$NYCMG_MEDIAID_CSV" | tr "\r" "\n" | grep "F,$" | cut -d, -f1 | sort -u | grep -v "^$" > "$NYCMG_FILLER_IDS"
printf "%-32s %12d %20s \n" "NYCMG (interstitial)" "$(cat "$NYCMG_FILLER_IDS" | wc -l)" ""
# list all CUNYTV ProTrack IDs (Programs, Segments, and Filler)
cat "$CUNY_FILLERS" "$CUNY_PROGRAMS" "$CUNY_SEGMENTS" | tr "\r" "\n" | awk '{print $1}' | grep -v "^$" | sort -u > "$IDS_CUNYTV"
printf "%-32s %12d %20s \n" "CUNYTV" "$(cat "$IDS_CUNYTV" | wc -l)" ""
cat "$CUNY_FILLERS" | tr "\r" "\n" | awk '{print $1}' | sort -u | grep -v "^$" > "$CUNYTV_FILLER_IDS"
printf "%-32s %12d %20s \n" "CUNYTV (interstitial)" "$(cat "$CUNYTV_FILLER_IDS" | wc -l)" ""
# list all ProTrack IDs, both systems
cat "$IDS_NYCMG" "$IDS_CUNYTV" | sort -u | grep -v "^$" > "$IDS_BOTH"

### REPORT ON OMNEON FILES
# list all Omneon files
echo
_report -d "Omneon Storage stats"
stat -F -l -t '%FT%T' "$OMNEON_PATH/"* | grep -v "/$" | sed 's/*//g' > "$ON_OMNEON_FILES_STAT"
cut -d " " -f 7- "$ON_OMNEON_FILES_STAT" |cut -d/ -f5 | cut -d. -f1 | sort | grep -v "^$" > "$ON_OMNEON_IDS"
printf "%-32s %12d %20s \n" "File Count (all omneon)" "$(cat "${ON_OMNEON_IDS}" | wc -l)" ""
awk -v date="$AGED_DATE" '$6 <= date' "$ON_OMNEON_FILES_STAT" | cut -d " " -f 7- |cut -d/ -f5 | cut -d. -f1 | sort | grep -v "^$" > "$ON_OMNEON_IDS_OLD"
comm -2 -3 "$ON_OMNEON_IDS_OLD" <(sort "$EVERGREEN_LIST") > "$ON_OMNEON_IDS_NO_EVERGREEN"
printf "%-32s %12d %20s \n" "File Count (+${keepnewforXdays} days old)" "$(cat "${ON_OMNEON_IDS_OLD}" | wc -l)" ""
# associate omneon files to custodians
comm -1 -2 "$ON_OMNEON_IDS_NO_EVERGREEN" "$IDS_NYCMG" > "$NYCMG_ON_OMNEON"
printf "%-32s %12d %20s \n" "File Count (NYCMG)" "$(cat "${NYCMG_ON_OMNEON}" | wc -l)" ""
comm -1 -2 "$ON_OMNEON_IDS_NO_EVERGREEN" "$IDS_CUNYTV" > "$CUNYTV_ON_OMNEON"
printf "%-32s %12d %20s \n" "File Count (CUNYTV)" "$(cat "${CUNYTV_ON_OMNEON}" | wc -l)" ""
comm -2 -3 "$ON_OMNEON_IDS" "$IDS_BOTH" > "$ORPHANS"
printf "%-32s %12d %20s \n" "File Count (evergreen)" "$(cat "${EVERGREEN_LIST}" | wc -l)" ""
printf "%-32s %12d %20s \n" "File Count (orphans)" "$(cat "${ORPHANS}" | wc -l)" ""

cat "${ON_OMNEON_FILES_STAT}" | grep -v "/clip.dir/[A-Z0-9][A-Z0-9_-]\+\(.mov\|.mxf\)$" | cut -d " " -f 7- | cut -d/ -f 5- > "${BAD_FILENAMES}"
if [ -s "${BAD_FILENAMES}" ] ; then
    printf "%-32s %12d %20s \n" "File Count (bad filename)" "$(cat "${BAD_FILENAMES}" | wc -l)" ""
fi
comm -1 -2 "$IDS_NYCMG" "$IDS_CUNYTV" | sort -u > "${CONFLICTS}"
if [ -s "${CONFLICTS}" ] ; then
    printf "%-32s %12d %20s \n" "File Count (conflicts!)" "$(cat "${CONFLICTS}" | wc -l)" ""
fi

### REPORT ON NEARLINE FILES
echo
_report -d "Nearline Storage stats"
# find what is on nearline - nycmg
stat -F -l -t '%FT%T' "$NYCMG_NEARLINE_PATH/"* | grep -v "/$" | sed 's:*::g' > "$NYCMG_NEARLINE_STAT"
cut -d " " -f 7- "$NYCMG_NEARLINE_STAT" | cut -d/ -f5 | cut -d. -f1 | sort | grep -v "^$" | grep -v "^ $" > "$NYCMG_NEARLINE"
printf "%-32s %12d %20s \n" "File Count (nycmg)" "$(cat "${NYCMG_NEARLINE}" | wc -l)" ""
# find what is on nearline - cunytv
find "${CUNYTV_DIGACQ_PATH}"/*/objects/service -name "*.mov" -exec stat -F -l -t '%FT%T' "{}" \; > "$CUNYTV_NEARLINE_STAT"
cut -d " " -f 7- "$CUNYTV_NEARLINE_STAT" | cut -d/ -f8 | cut -d. -f1 | sort | grep -v "^$" > "$CUNYTV_NEARLINE"
printf "%-32s %12d %20s \n" "File Count (cunytv)" "$(cat "${CUNYTV_NEARLINE}" | wc -l)" ""

# LTO reports
cat ~/Documents/lto_indexes/C0*_namesize.txt | sort > "${NYCMG_ON_LTO_SIZE_EXT}"
cat ~/Documents/lto_indexes/C0*_index.txt | sort > "${NYCMG_ON_LTO_PATH}"
cat ~/Documents/lto_indexes/A0*_namesize.txt | sort > "${CUNYTV_ON_LTO_SIZE_EXT}"

# find NYCMG removal candidates
comm -2 -3 "$NYCMG_ON_OMNEON" "$NYCMG_FILLER_IDS" > "$NYCMG_ON_OMNEON_NOT_FILLER"
comm -2 -3 "$NYCMG_ON_OMNEON_NOT_FILLER" "$NYCMG4AIR" > "$NYCMG_REMOVAL_CANDIDATES"
comm -1 -2 "$NYCMG_NEARLINE" "$NYCMG_REMOVAL_CANDIDATES" > "$NYCMG_REMOVAL_CANDIDATES_NEARLINE"
comm -1 -3 "$NYCMG_NEARLINE" "$NYCMG_REMOVAL_CANDIDATES" > "$NYCMG_REMOVAL_CANDIDATES_NOT_NEARLINE"

for i in `cat "$NYCMG_REMOVAL_CANDIDATES_NEARLINE"` ; do grep "/${i}\." "$ON_OMNEON_FILES_STAT" | awk '{print $7 " " $5}' | sed 's:/Volumes/fs0/clip.dir/::g' ; done  > "/$REPORTDIR/nycmg_removal_candidates_on_omneon_with_extension_and_size.txt"
for i in `cat "$NYCMG_REMOVAL_CANDIDATES_NEARLINE"` ; do grep "/${i}\." "$NYCMG_NEARLINE_STAT" | awk '{print $7 " " $5}' | sed 's:/Volumes/NYCM_Media/media/::g' ; done > "/$REPORTDIR/nycmg_removal_candidates_on_nearline_with_extension_and_size.txt"
diff -y "/$REPORTDIR/nycmg_removal_candidates_on_omneon_with_extension_and_size.txt" "$REPORTDIR/nycmg_removal_candidates_on_nearline_with_extension_and_size.txt" | grep -v "|" | grep -v "<" | grep -v ">" | awk '{print $1}' | cut -d " " -f2 > "$REPORTDIR/nycmg_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt"

# find CUNYTV removal candidates
comm -2 -3 "$CUNYTV_ON_OMNEON" "$CUNYTV_FILLER_IDS" > "$CUNYTV_ON_OMNEON_NOT_FILLER"
comm -2 -3 "$CUNYTV_ON_OMNEON_NOT_FILLER" "$CUNYTV4AIR" > "$CUNYTV_REMOVAL_CANDIDATES"
comm -1 -2 "$CUNYTV_NEARLINE" "$CUNYTV_REMOVAL_CANDIDATES" > "$CUNYTV_REMOVAL_CANDIDATES_NEARLINE"
comm -1 -3 "$CUNYTV_NEARLINE" "$CUNYTV_REMOVAL_CANDIDATES" > "$CUNYTV_REMOVAL_CANDIDATES_NOT_NEARLINE"

for i in `cat "$CUNYTV_REMOVAL_CANDIDATES"` ; do grep "/${i}\." "$ON_OMNEON_FILES_STAT" | awk '{print $7 " " $5}' | sed 's:/Volumes/fs0/clip.dir/::g' ; done  > "/$REPORTDIR/cunytv_removal_candidates_on_omneon_with_extension_and_size.txt"
for i in `cat "$CUNYTV_REMOVAL_CANDIDATES_NEARLINE"` ; do grep "/${i}\." "$CUNYTV_NEARLINE_STAT" | awk '{print $7 " " $5}' | cut -d/ -f8- | sed 's/*//' ; done > "/$REPORTDIR/cunytv_removal_candidates_on_nearline_with_extension_and_size.txt"
diff -y "/$REPORTDIR/cunytv_removal_candidates_on_omneon_with_extension_and_size.txt" "$REPORTDIR/cunytv_removal_candidates_on_nearline_with_extension_and_size.txt" | grep -v "|" | grep -v "<" | grep -v ">" | awk '{print $1}' | cut -d " " -f2 > "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt"
comm -1 -2 "/$REPORTDIR/cunytv_removal_candidates_on_omneon_with_extension_and_size.txt" "$CUNYTV_ON_LTO_SIZE_EXT" | cut -d " " -f1 > "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_lto_index.txt"

# recall list
comm -2 -3 "${CUNYTV4AIR}" "${CUNYTV_ON_OMNEON}" > "${CUNYTV_TO_RESTORE}"
#comm -1 -2 "${CUNYTV_TO_RESTORE}" "$CUNYTV_ON_LTO_SIZE_EXT" > "${CUNYTV_TO_RESTORE_FROM_LTO}"
#while read i ; do grep -h "${i}[^_]" ~/Documents/A00*.txt done < "${CUNYTV_TO_RESTORE_FROM_LTO}" | grep -v "metadata" | grep -v "objects" | grep -v "txt$" | sort > "${CUNYTV_TO_RESTORE_FROM_LTO_DETAIL}" 

echo
if [[ -s "${CONFLICTS}" ]] ; then
_report -w "Please note these mediaid conflicts: $(cat "${CONFLICTS}" | xargs)"
echo
fi
if [[ -s "${BAD_FILENAMES}" ]] ; then
_report -w "Please note these bad filenames:"
cat "${BAD_FILENAMES}"
echo
fi
if [[ $(cat "${ORPHANS}") ]] ; then
_report -d "Please note there are $(cat "${ORPHANS}" | wc -l) orphans, to see them run:"
_report -w "  cat ${ORPHANS}"
echo
fi
if [[ $(cat "$REPORTDIR/nycmg_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt" | grep -v BBC) ]] ; then
    echo
    _report -d "Candidate files to remove = $(pushd "${OMNEON_PATH}" >> /dev/null && du -sch $(cat "$REPORTDIR/nycmg_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt" | xargs) | tail -n1 | awk '{print $1}' && popd>> /dev/null)"
    _report -d "To remove nycmg files that are not new, not filler, not about-to-air, that are already on nearline run:"
    echo
    _report -w "  pushd "${OMNEON_PATH}" && rm -i $(cat "$REPORTDIR/nycmg_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt" | grep -v BBC | xargs) && popd"
    echo
fi
if [[ $(cat "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt") ]] ; then
    echo
    _report -d "Candidate files to remove = $(pushd "${OMNEON_PATH}" >> /dev/null && du -sch $(cat "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt" | xargs) | tail -n1 | awk '{print $1}' && popd>> /dev/null)"
    _report -d "To remove cunytv files that are not new, not filler, not about-to-air, that are already on nearline run:"
    echo
    _report -w "  pushd "${OMNEON_PATH}" && rm -i $(cat "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_extension_and_size.txt" | xargs) && popd"
    echo
fi
if [[ $(cat "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_lto_index.txt") ]] ; then
    echo
    _report -d "Candidate files to remove = $(pushd "${OMNEON_PATH}" >> /dev/null && du -sch $(cat "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_lto_index.txt" | xargs) | tail -n1 | awk '{print $1}' && popd>> /dev/null)"
    _report -d "To remove cunytv files that are not new, not filler, not about-to-air, that are already on LTO tape run:"
    echo
    _report -w "  pushd "${OMNEON_PATH}" && rm -i $(cat "$REPORTDIR/cunytv_removal_candidates_save_to_remove_from_omneon_based_on_lto_index.txt" | xargs) && popd"
    echo
fi

echo -n "" > "${ORPHANPATHS}"
while read orphan ; do
    grep "clip.dir/${orphan}.m" "${ON_OMNEON_FILES_STAT}" | cut -d " " -f 7- >> "${ORPHANPATHS}"
done < "${ORPHANS}"

echo "filename,recport,recdate,recname" > "$ORPHANSDETAIL"
while read orphanpath ; do
    omdata=$(head -c 10000 "${orphanpath}" | strings | grep clip.dir | head -n 1)
    recport=$(echo "$omdata" | cut -d";" -f2)
    recdate=$(echo "$omdata" | cut -d";" -f9)
    recname=$(echo "$omdata" | cut -d";" -f6)
    if [[ "${orphanpath}" == "${recname}" ]] ;then
        recname=""
    fi
    echo "${orphanpath},${recport},${recdate},${recname}" >> "${ORPHANSDETAIL}"
done < "${ORPHANPATHS}"
cat "${ORPHANSDETAIL}" | grep ",MR-[1-9][-SD],\|,MR-[10]," > "${ORPHANSDETAIL_CUNYONLY}"
cat "$NYCMG_MEDIAID_CSV" | tr "\r" "\n" | grep -v "^$" | awk -F "," '{print $1 "," $(NF-2) }' | sed 's/T-//' | sed 's|/1||' | sed 's/.........$//' | sort -t, -k2 -r | sort -t, -u -k1,1 | sort -t, -k2 | awk -v d=$(date "+%F") -F, '$2 < d' > "${NYCMG_EXPIRED_IDS}"
for i in `cat "${NYCMG_NEARLINE}" "${NYCMG_ON_OMNEON}" | sort -u` ; do grep "^${i}," "${NYCMG_EXPIRED_IDS}" ; done > "${NYCMG_EXPIRED_IDS_ONLINE}"
for i in `cut -d, -f1 "${NYCMG_EXPIRED_IDS_ONLINE}" | sort` ; do
    name=`echo "$i" | cut -d. -f1`
    csvdata=`grep "^${name}," "${NYCMG_MEDIAID_CSV}"`
    echo "${i},${csvdata}"
done > "${NYCMG_EXPIRED_IDS_ONLINE_WITH_INFO}"
awk '{print $7 " " $5}' "${NYCMG_NEARLINE_STAT}" | awk -F/ '{print $NF}' | sort -t, -k 2,2 -n > "${NYCMG_NEARLINE_BY_SIZE}"
for i in `cat nycmg_on_nearline_by_filesize.txt | sed 's/ /,/g'` ; do
    name=`echo "$i" | cut -d. -f1`
    csvdata=`grep "^${name}," "${NYCMG_MEDIAID_CSV}"`
    echo "${i},${csvdata}"
done > "${NYCMG_NEARLINE_BY_SIZE_WITH_INFO}"

cat "${IDS_NYCMG}" | while read line ; do echo "${line} " ; done > /tmp/all.txt
cat "${NYCMG_ON_OMNEON}" | while read line ; do echo "$line omneon" ; done | tr "\r" "\n" > /tmp/omneon.txt
cat "${NYCMG_NEARLINE}" | while read line ; do echo "$line nearline" ; done | sort | tr "\r" "\n" > /tmp/nearline.txt
cat "${NYCMG_ON_LTO_PATH}" | awk -F "/" '{print $NF " " $(NF-1)}' | sed 's/.mxf//g' | sed 's/.mov//g' | grep -v '^\.' | sort | tr "\r" "\n" > /tmp/lto.txt
join -a1 /tmp/all.txt /tmp/nearline.txt > /tmp/all_near.txt
join -a1 /tmp/all_near.txt /tmp/omneon.txt > /tmp/allnearomneon.txt
join -a1 /tmp/allnearomneon.txt /tmp/lto.txt | grep " " > "${NYCMG_STORAGE_SUMMARY}"

rsync -rtv --perms --chmod=777  "$ORPHANSDETAIL" "$NYCMG_NEARLINE" "$NYCMG_ON_OMNEON" "$CUNYTV_ON_OMNEON" "${NYCMG_ON_LTO_SIZE_EXT}" "${NYCMG_STORAGE_SUMMARY}" "$REPORTDIRNYC/"

echo "om_filename,om_recport,om_recdate,om_recname,om_size,om_encdate,nl_name,nl_recport,nl_recdate,nl_recname,nl_size,nl_encdate" > "/$REPORTDIR/filenameconflicts.csv"
diff -y "/$REPORTDIR/nycmg_removal_candidates_on_omneon_with_extension_and_size.txt" "/$REPORTDIR/nycmg_removal_candidates_on_nearline_with_extension_and_size.txt" | grep "|" | while read conflictnameline ; do
    omname=$(echo "${conflictnameline}" | awk '{print $1}')
    omdata=$(head -c 10000 "${OMNEON_PATH}/${omname}" | strings | grep clip.dir | head -n 1)
    omrecport=$(echo "$omdata" | cut -d";" -f2)
    omrecdate=$(echo "$omdata" | cut -d";" -f9)
    omrecname=$(echo "$omdata" | cut -d";" -f6)
    omencdate=$(ffprobe 2>/dev/null -i "${OMNEON_PATH}/${omname}" -select_streams v:0 -show_entries stream_tags=creation_time -of csv | cut -d"," -f2-)
    omsize=$(ls -l "${OMNEON_PATH}/${omname}" | awk '{print $5}')
    if [[ "${orphanpath}" == "${omrecname}" ]] ;then
        omrecname=""
    fi
        nlname=$(echo "${conflictnameline}" | awk '{print $4}')
        nldata=$(head -c 10000 "${NYCMG_NEARLINE_PATH}/${nlname}" | strings | grep clip.dir | head -n 1)
    nlrecport=$(echo "$nldata" | cut -d";" -f2)
    nlrecdate=$(echo "$nldata" | cut -d";" -f9)
    nlrecname=$(echo "$nldata" | cut -d";" -f6)
        nlencdate=$(ffprobe 2>/dev/null -i "${NYCMG_NEARLINE_PATH}/${nlname}" -select_streams v:0 -show_entries stream_tags=creation_time -of csv | cut -d"," -f2-)
        nlsize=$(ls -l "${NYCMG_NEARLINE_PATH}/${nlname}" | awk '{print $5}')
    if [[ "${orphanpath}" == "${nlrecname}" ]] ;then
        nlrecname=""
    fi
    echo "${omname},${omrecport},${omrecdate},${omrecname},${omsize},${omencdate},${nlname},${nlrecport},${nlrecdate},${nlrecname},${nlsize},${nlencdate}" >> "/$REPORTDIR/filenameconflicts.csv"
done

# make nycmg pull list
comm -2 -3 "${NYCMG4AIR}"  "${ON_OMNEON_IDS}" > /tmp/nycmg_pulllist_temp.txt
for i in `cat /tmp/nycmg_pulllist_temp.txt` ; do grep "$i" nycmg_storage_summary.txt ; done > "/$REPORTDIR/nycmg_pulllist.csv"

ls -l /Volumes/NYCM_Media/media/ | awk '{print $9 " " $5 }' | sort > /tmp/nearline.txt
for i in ~/Documents/lto_indexes/C*.schema ; do
    xml sel -t -m ".//file" -v name -o " " -v length -n "$i" | sort -u
done | sort > /tmp/ltosizes.txt
comm -1 -2 /tmp/nearline.txt /tmp/ltosizes.txt | cut -d " " -f1 > "/$REPORTDIR/nycmg_on_lto_and_nearline_sizename_match.txt"
